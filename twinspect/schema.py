# generated by datamodel-codegen:
#   filename:  schema.yml

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import AnyUrl, BaseModel, Field


class Mode(Enum):
    text = 'text'
    image = 'image'
    audio = 'audio'
    video = 'video'


class Algorithm(BaseModel):
    name: str = Field(..., description='The name of the Algorithms')
    label: str = Field(..., description='Short labes used in tables and for file names')
    mode: Mode = Field(..., description='Perceptual mode of algorithm')
    function: str = Field(
        ...,
        description='Full path to python function that implements the algorithm. The function must accept a file path as the first parameter and must return a hex encoded compact hash code.',
    )
    params: Optional[List] = Field(
        None, description='A list of parameters to be forwared to the function'
    )
    dependencies: Optional[List] = Field(
        None,
        description='A list of python package dependencies required by the implementation',
    )


class Dataset(BaseModel):
    name: str = Field(..., description='The name of the dataset')
    label: Optional[str] = Field(
        None, description='Short label used in tables and as folder name'
    )
    url: AnyUrl = Field(..., description='Download url for dataset')
    mode: Mode = Field(..., description='Perceptual mode of media assets')
    installer: Optional[str] = Field(
        None, description='Full path to python function that installs the dataset'
    )
    samples: Optional[int] = Field(
        None, description='Number of samples to install from the dataset'
    )
    clusters: Optional[int] = Field(
        None, description='Number of similarity clusters to build for dataset'
    )
    seed: Optional[int] = Field(
        None, description='Seed for reproducible random selection of samples'
    )
    download_hash: Optional[str] = Field(
        None, description='Hash of unprocessed download data'
    )
    data_hash: Optional[str] = Field(None, description='Hash of processed data folder')


class Transformation(BaseModel):
    name: str = Field(..., description='The name of the transformation')
    mode: Mode = Field(..., description='Perceptual mode of media assets')
    function: str = Field(
        ..., description='Full path to python function that applies the transformation'
    )
    params: Optional[List] = Field(
        None,
        description='A list of transformation parameters to be used with the function',
    )


class Configuration(BaseModel):
    twinspect: str = Field(..., description='Configuration file format version')
    algorithms: Optional[List[Algorithm]] = Field(
        None, description='List of algorithms to be benchmarked'
    )
    datasets: List[Dataset] = Field(..., description='List of Datasets')
    transformations: List[Transformation] = Field(
        ..., description='List of Transformations'
    )
